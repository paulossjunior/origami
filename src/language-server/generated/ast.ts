/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type QualifiedName = string;

export type QualifiedNameWithWildcard = string;

export interface Activity extends AstNode {
    readonly $container: Process;
    readonly $type: 'Activity';
    FullName?: FullName
    name?: string
    taskes: Array<Task>
}

export const Activity = 'Activity';

export function isActivity(item: unknown): item is Activity {
    return reflection.isInstance(item, Activity);
}

export interface AtomicUserStory extends AstNode {
    readonly $container: Backlog;
    readonly $type: 'AtomicUserStory';
    activity: boolean
    epic: boolean
    id: string
    name?: string
}

export const AtomicUserStory = 'AtomicUserStory';

export function isAtomicUserStory(item: unknown): item is AtomicUserStory {
    return reflection.isInstance(item, AtomicUserStory);
}

export interface AtomicUserStoryActivity extends AstNode {
    readonly $type: 'AtomicUserStoryActivity';
    type: Reference<Activity>
}

export const AtomicUserStoryActivity = 'AtomicUserStoryActivity';

export function isAtomicUserStoryActivity(item: unknown): item is AtomicUserStoryActivity {
    return reflection.isInstance(item, AtomicUserStoryActivity);
}

export interface AtomicUserStoryEpic extends AstNode {
    readonly $type: 'AtomicUserStoryEpic';
    type: Reference<Epic>
}

export const AtomicUserStoryEpic = 'AtomicUserStoryEpic';

export function isAtomicUserStoryEpic(item: unknown): item is AtomicUserStoryEpic {
    return reflection.isInstance(item, AtomicUserStoryEpic);
}

export interface Backlog extends AstNode {
    readonly $container: Model;
    readonly $type: 'Backlog';
    name: string
    userstories: Array<AtomicUserStory | Epic>
}

export const Backlog = 'Backlog';

export function isBacklog(item: unknown): item is Backlog {
    return reflection.isInstance(item, Backlog);
}

export interface Epic extends AstNode {
    readonly $container: Backlog;
    readonly $type: 'Epic';
    id: string
    name?: string
    process: boolean
}

export const Epic = 'Epic';

export function isEpic(item: unknown): item is Epic {
    return reflection.isInstance(item, Epic);
}

export interface EpicProcess extends AstNode {
    readonly $type: 'EpicProcess';
    type: Reference<Process>
}

export const EpicProcess = 'EpicProcess';

export function isEpicProcess(item: unknown): item is EpicProcess {
    return reflection.isInstance(item, EpicProcess);
}

export interface FullName extends AstNode {
    readonly $container: Activity | Process | Task;
    readonly $type: 'FullName';
    fullName: string
}

export const FullName = 'FullName';

export function isFullName(item: unknown): item is FullName {
    return reflection.isInstance(item, FullName);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    components: Array<Backlog | Process>
    project?: Project
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Process extends AstNode {
    readonly $container: Model;
    readonly $type: 'Process';
    activities: Array<Activity>
    FullName?: FullName
    name?: string
}

export const Process = 'Process';

export function isProcess(item: unknown): item is Process {
    return reflection.isInstance(item, Process);
}

export interface Project extends AstNode {
    readonly $container: Model;
    readonly $type: 'Project';
    description: string
    Identification: string
    name: string
}

export const Project = 'Project';

export function isProject(item: unknown): item is Project {
    return reflection.isInstance(item, Project);
}

export interface Task extends AstNode {
    readonly $container: Activity;
    readonly $type: 'Task';
    description?: string
    FullName?: FullName
    name?: string
}

export const Task = 'Task';

export function isTask(item: unknown): item is Task {
    return reflection.isInstance(item, Task);
}

export interface OrigamiAstType {
    Activity: Activity
    AtomicUserStory: AtomicUserStory
    AtomicUserStoryActivity: AtomicUserStoryActivity
    AtomicUserStoryEpic: AtomicUserStoryEpic
    Backlog: Backlog
    Epic: Epic
    EpicProcess: EpicProcess
    FullName: FullName
    Model: Model
    Process: Process
    Project: Project
    Task: Task
}

export class OrigamiAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Activity', 'AtomicUserStory', 'AtomicUserStoryActivity', 'AtomicUserStoryEpic', 'Backlog', 'Epic', 'EpicProcess', 'FullName', 'Model', 'Process', 'Project', 'Task'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AtomicUserStoryActivity:type': {
                return Activity;
            }
            case 'AtomicUserStoryEpic:type': {
                return Epic;
            }
            case 'EpicProcess:type': {
                return Process;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Activity': {
                return {
                    name: 'Activity',
                    mandatory: [
                        { name: 'taskes', type: 'array' }
                    ]
                };
            }
            case 'AtomicUserStory': {
                return {
                    name: 'AtomicUserStory',
                    mandatory: [
                        { name: 'activity', type: 'boolean' },
                        { name: 'epic', type: 'boolean' }
                    ]
                };
            }
            case 'Backlog': {
                return {
                    name: 'Backlog',
                    mandatory: [
                        { name: 'userstories', type: 'array' }
                    ]
                };
            }
            case 'Epic': {
                return {
                    name: 'Epic',
                    mandatory: [
                        { name: 'process', type: 'boolean' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'components', type: 'array' }
                    ]
                };
            }
            case 'Process': {
                return {
                    name: 'Process',
                    mandatory: [
                        { name: 'activities', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new OrigamiAstReflection();
