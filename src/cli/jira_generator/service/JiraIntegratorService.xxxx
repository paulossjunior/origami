
import { Version3Client } from 'jira.js';
import { Issue } from 'jira.js/out/agile/issue.js';
import fetch from 'node-fetch';
export class JiraIntegrationService {

    client: Version3Client;
    projectKey: string;
    timeout: number;
    email:string;
    apiToken:string;

    constructor(email: string, apiToken: string, host: string, projectkey: string){
      
      this.projectKey = projectkey;
      this.timeout = 5000
      this.email = email;
      this.apiToken = apiToken;

      const config = {
        host,
        authentication: {
          basic: {
            email,
            apiToken,
          },
        },
      }

      this.client = new Version3Client(config);
      

    }

    public async createEPIC (summary: string, description: string, parent?:string){
      
      return await this.createIssue(summary,'Epic',description, parent)
    }

    public async createUserStory (summary: string,description: string,parent?:string){
      
      return await this.createIssue(summary,'Story',description,parent)
    }

    public async createTask (summary: string, description: string,parent?:string){
      
      return await this.createIssue(summary,'Task',description,parent)
    }

    public async createLink (parent: string, child: string){

      this.client.issueLinks.linkIssues({
        inwardIssue: { key: parent },
        outwardIssue: { key : child },
        type: { name: 'blocks' },
      })
    }


    public async createSubTask (summary: string,description: string,parent?:string){
     
      return await this.createIssue(summary,'Subtarefa',description,parent)
    }

  

  public async createIssue (summary: string, type: string, description: string,parent?:string){
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error('Timeout'));
        }, this.timeout);
      });

      const issue = {
        fields: {
          summary: summary,
          description: description,
          issuetype: {
            name: type
          },
          project: {
            key: this.projectKey,
          },
          parent:{
            key: parent
          },
        }
      }

      return Promise.race([
        this.client.issues.createIssue(issue),
        timeoutPromise,
      ]);

  }

  public  async getIssue (id: string): Promise<Issue> {
      return await this.client.issues.getIssue({ issueIdOrKey: id });
  }

  public async createSprint (){
    

    const bodyData = `{
      "originBoardId": 5,
      "goal": "sprint 1 goal",
      "endDate": "2024-04-20T01:22:00.000+10:00",
      "name": "sprint 1",
      "startDate": "2024-04-11T15:22:00.000+10:00"
    }`;

    fetch('https://conectafapes.atlassian.net/rest/agile/1.0/sprint', {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${Buffer.from(`${this.email}:${this.apiToken}`).toString('base64')}`,
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: bodyData
  })
    .then(response => {
      console.log(
        `Response: ${response.status} ${response.statusText}`
      );
      return response.text();
    })
    .then(text => console.log(text))
    .catch(err => console.error(err));

  }


}